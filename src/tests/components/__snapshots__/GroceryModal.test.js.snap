// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GroceryModal Component renders component successfully 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <GroceryModal
    addGrocery={[MockFunction]}
    editGrocery={[MockFunction]}
    errors={
      Object {
        "groceryName": "",
        "groceryPrice": "",
      }
    }
    grocery={Object {}}
    groceryName=""
    groceryPrice=""
    onHide={[MockFunction]}
    show={true}
    updateDetails={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Modal
        animation={true}
        aria-labelledby="contained-modal-title"
        autoFocus={true}
        backdrop={true}
        bsClass="modal"
        dialogComponentClass={[Function]}
        enforceFocus={true}
        keyboard={true}
        manager={
          ModalManager {
            "add": [Function],
            "containers": Array [],
            "data": Array [],
            "handleContainerOverflow": true,
            "hideSiblingNodes": true,
            "isTopModal": [Function],
            "modals": Array [],
            "remove": [Function],
          }
        }
        onHide={[MockFunction]}
        renderBackdrop={[Function]}
        restoreFocus={true}
        show={true}
      >
        <ModalHeader
          bsClass="modal-header"
          closeButton={true}
          closeLabel="Close"
        >
          <ModalTitle
            bsClass="modal-title"
            componentClass="h4"
            id="contained-modal-title"
          >
            Grocery Details
          </ModalTitle>
        </ModalHeader>
        <ModalBody
          bsClass="modal-body"
          componentClass="div"
          style={
            Object {
              "marginLeft": "auto",
              "marginRight": "auto",
              "width": "100%",
            }
          }
        >
          <label
            className="active"
            htmlFor="name"
          >
            Grocery Name:
          </label>
          
          <input
            className="form-control"
            defaultValue=""
            id="groceryName"
            name="groceryName"
            onChange={[MockFunction]}
            required={true}
            type="text"
          />
          <br />
          <label
            className="active"
            htmlFor="name"
          >
            Grocery Price (₦):
          </label>
          
          <input
            className="form-control"
            defaultValue=""
            id="groceryPrice"
            name="groceryPrice"
            onChange={[MockFunction]}
            required={true}
            type="number"
          />
        </ModalBody>
        <ModalFooter
          bsClass="modal-footer"
          componentClass="div"
        >
          <button
            className="waves-effect waves-dark btn right hoverable dark-green btn btn-primary"
            id="add-grocery"
            onClick={[MockFunction]}
            type="submit"
          >
            Add Item
          </button>
        </ModalFooter>
      </Modal>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "animation": true,
        "aria-labelledby": "contained-modal-title",
        "autoFocus": true,
        "backdrop": true,
        "bsClass": "modal",
        "children": Array [
          <ModalHeader
            bsClass="modal-header"
            closeButton={true}
            closeLabel="Close"
          >
            <ModalTitle
              bsClass="modal-title"
              componentClass="h4"
              id="contained-modal-title"
            >
              Grocery Details
            </ModalTitle>
          </ModalHeader>,
          <ModalBody
            bsClass="modal-body"
            componentClass="div"
            style={
              Object {
                "marginLeft": "auto",
                "marginRight": "auto",
                "width": "100%",
              }
            }
          >
            <label
              className="active"
              htmlFor="name"
            >
              Grocery Name:
            </label>
            
            <input
              className="form-control"
              defaultValue=""
              id="groceryName"
              name="groceryName"
              onChange={[MockFunction]}
              required={true}
              type="text"
            />
            <br />
            <label
              className="active"
              htmlFor="name"
            >
              Grocery Price (₦):
            </label>
            
            <input
              className="form-control"
              defaultValue=""
              id="groceryPrice"
              name="groceryPrice"
              onChange={[MockFunction]}
              required={true}
              type="number"
            />
          </ModalBody>,
          <ModalFooter
            bsClass="modal-footer"
            componentClass="div"
          >
            <button
              className="waves-effect waves-dark btn right hoverable dark-green btn btn-primary"
              id="add-grocery"
              onClick={[MockFunction]}
              type="submit"
            >
              Add Item
            </button>
          </ModalFooter>,
        ],
        "dialogComponentClass": [Function],
        "enforceFocus": true,
        "keyboard": true,
        "manager": ModalManager {
          "add": [Function],
          "containers": Array [],
          "data": Array [],
          "handleContainerOverflow": true,
          "hideSiblingNodes": true,
          "isTopModal": [Function],
          "modals": Array [],
          "remove": [Function],
        },
        "onHide": [MockFunction],
        "renderBackdrop": [Function],
        "restoreFocus": true,
        "show": true,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "bsClass": "modal-header",
            "children": <ModalTitle
              bsClass="modal-title"
              componentClass="h4"
              id="contained-modal-title"
            >
              Grocery Details
            </ModalTitle>,
            "closeButton": true,
            "closeLabel": "Close",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "modal-title",
              "children": "Grocery Details",
              "componentClass": "h4",
              "id": "contained-modal-title",
            },
            "ref": null,
            "rendered": "Grocery Details",
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "bsClass": "modal-body",
            "children": Array [
              <label
                className="active"
                htmlFor="name"
              >
                Grocery Name:
              </label>,
              "",
              <input
                className="form-control"
                defaultValue=""
                id="groceryName"
                name="groceryName"
                onChange={[MockFunction]}
                required={true}
                type="text"
              />,
              <br />,
              <label
                className="active"
                htmlFor="name"
              >
                Grocery Price (₦):
              </label>,
              "",
              <input
                className="form-control"
                defaultValue=""
                id="groceryPrice"
                name="groceryPrice"
                onChange={[MockFunction]}
                required={true}
                type="number"
              />,
            ],
            "componentClass": "div",
            "style": Object {
              "marginLeft": "auto",
              "marginRight": "auto",
              "width": "100%",
            },
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Grocery Name:",
                "className": "active",
                "htmlFor": "name",
              },
              "ref": null,
              "rendered": "Grocery Name:",
              "type": "label",
            },
            "",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "form-control",
                "defaultValue": "",
                "id": "groceryName",
                "name": "groceryName",
                "onChange": [MockFunction],
                "required": true,
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Grocery Price (₦):",
                "className": "active",
                "htmlFor": "name",
              },
              "ref": null,
              "rendered": "Grocery Price (₦):",
              "type": "label",
            },
            "",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "form-control",
                "defaultValue": "",
                "id": "groceryPrice",
                "name": "groceryPrice",
                "onChange": [MockFunction],
                "required": true,
                "type": "number",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "bsClass": "modal-footer",
            "children": <button
              className="waves-effect waves-dark btn right hoverable dark-green btn btn-primary"
              id="add-grocery"
              onClick={[MockFunction]}
              type="submit"
            >
              Add Item
            </button>,
            "componentClass": "div",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Add Item",
              "className": "waves-effect waves-dark btn right hoverable dark-green btn btn-primary",
              "id": "add-grocery",
              "onClick": [MockFunction],
              "type": "submit",
            },
            "ref": null,
            "rendered": "Add Item",
            "type": "button",
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Modal
          animation={true}
          aria-labelledby="contained-modal-title"
          autoFocus={true}
          backdrop={true}
          bsClass="modal"
          dialogComponentClass={[Function]}
          enforceFocus={true}
          keyboard={true}
          manager={
            ModalManager {
              "add": [Function],
              "containers": Array [],
              "data": Array [],
              "handleContainerOverflow": true,
              "hideSiblingNodes": true,
              "isTopModal": [Function],
              "modals": Array [],
              "remove": [Function],
            }
          }
          onHide={[MockFunction]}
          renderBackdrop={[Function]}
          restoreFocus={true}
          show={true}
        >
          <ModalHeader
            bsClass="modal-header"
            closeButton={true}
            closeLabel="Close"
          >
            <ModalTitle
              bsClass="modal-title"
              componentClass="h4"
              id="contained-modal-title"
            >
              Grocery Details
            </ModalTitle>
          </ModalHeader>
          <ModalBody
            bsClass="modal-body"
            componentClass="div"
            style={
              Object {
                "marginLeft": "auto",
                "marginRight": "auto",
                "width": "100%",
              }
            }
          >
            <label
              className="active"
              htmlFor="name"
            >
              Grocery Name:
            </label>
            
            <input
              className="form-control"
              defaultValue=""
              id="groceryName"
              name="groceryName"
              onChange={[MockFunction]}
              required={true}
              type="text"
            />
            <br />
            <label
              className="active"
              htmlFor="name"
            >
              Grocery Price (₦):
            </label>
            
            <input
              className="form-control"
              defaultValue=""
              id="groceryPrice"
              name="groceryPrice"
              onChange={[MockFunction]}
              required={true}
              type="number"
            />
          </ModalBody>
          <ModalFooter
            bsClass="modal-footer"
            componentClass="div"
          >
            <button
              className="waves-effect waves-dark btn right hoverable dark-green btn btn-primary"
              id="add-grocery"
              onClick={[MockFunction]}
              type="submit"
            >
              Add Item
            </button>
          </ModalFooter>
        </Modal>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "animation": true,
          "aria-labelledby": "contained-modal-title",
          "autoFocus": true,
          "backdrop": true,
          "bsClass": "modal",
          "children": Array [
            <ModalHeader
              bsClass="modal-header"
              closeButton={true}
              closeLabel="Close"
            >
              <ModalTitle
                bsClass="modal-title"
                componentClass="h4"
                id="contained-modal-title"
              >
                Grocery Details
              </ModalTitle>
            </ModalHeader>,
            <ModalBody
              bsClass="modal-body"
              componentClass="div"
              style={
                Object {
                  "marginLeft": "auto",
                  "marginRight": "auto",
                  "width": "100%",
                }
              }
            >
              <label
                className="active"
                htmlFor="name"
              >
                Grocery Name:
              </label>
              
              <input
                className="form-control"
                defaultValue=""
                id="groceryName"
                name="groceryName"
                onChange={[MockFunction]}
                required={true}
                type="text"
              />
              <br />
              <label
                className="active"
                htmlFor="name"
              >
                Grocery Price (₦):
              </label>
              
              <input
                className="form-control"
                defaultValue=""
                id="groceryPrice"
                name="groceryPrice"
                onChange={[MockFunction]}
                required={true}
                type="number"
              />
            </ModalBody>,
            <ModalFooter
              bsClass="modal-footer"
              componentClass="div"
            >
              <button
                className="waves-effect waves-dark btn right hoverable dark-green btn btn-primary"
                id="add-grocery"
                onClick={[MockFunction]}
                type="submit"
              >
                Add Item
              </button>
            </ModalFooter>,
          ],
          "dialogComponentClass": [Function],
          "enforceFocus": true,
          "keyboard": true,
          "manager": ModalManager {
            "add": [Function],
            "containers": Array [],
            "data": Array [],
            "handleContainerOverflow": true,
            "hideSiblingNodes": true,
            "isTopModal": [Function],
            "modals": Array [],
            "remove": [Function],
          },
          "onHide": [MockFunction],
          "renderBackdrop": [Function],
          "restoreFocus": true,
          "show": true,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "modal-header",
              "children": <ModalTitle
                bsClass="modal-title"
                componentClass="h4"
                id="contained-modal-title"
              >
                Grocery Details
              </ModalTitle>,
              "closeButton": true,
              "closeLabel": "Close",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "modal-title",
                "children": "Grocery Details",
                "componentClass": "h4",
                "id": "contained-modal-title",
              },
              "ref": null,
              "rendered": "Grocery Details",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "modal-body",
              "children": Array [
                <label
                  className="active"
                  htmlFor="name"
                >
                  Grocery Name:
                </label>,
                "",
                <input
                  className="form-control"
                  defaultValue=""
                  id="groceryName"
                  name="groceryName"
                  onChange={[MockFunction]}
                  required={true}
                  type="text"
                />,
                <br />,
                <label
                  className="active"
                  htmlFor="name"
                >
                  Grocery Price (₦):
                </label>,
                "",
                <input
                  className="form-control"
                  defaultValue=""
                  id="groceryPrice"
                  name="groceryPrice"
                  onChange={[MockFunction]}
                  required={true}
                  type="number"
                />,
              ],
              "componentClass": "div",
              "style": Object {
                "marginLeft": "auto",
                "marginRight": "auto",
                "width": "100%",
              },
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Grocery Name:",
                  "className": "active",
                  "htmlFor": "name",
                },
                "ref": null,
                "rendered": "Grocery Name:",
                "type": "label",
              },
              "",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "form-control",
                  "defaultValue": "",
                  "id": "groceryName",
                  "name": "groceryName",
                  "onChange": [MockFunction],
                  "required": true,
                  "type": "text",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Grocery Price (₦):",
                  "className": "active",
                  "htmlFor": "name",
                },
                "ref": null,
                "rendered": "Grocery Price (₦):",
                "type": "label",
              },
              "",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "form-control",
                  "defaultValue": "",
                  "id": "groceryPrice",
                  "name": "groceryPrice",
                  "onChange": [MockFunction],
                  "required": true,
                  "type": "number",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "modal-footer",
              "children": <button
                className="waves-effect waves-dark btn right hoverable dark-green btn btn-primary"
                id="add-grocery"
                onClick={[MockFunction]}
                type="submit"
              >
                Add Item
              </button>,
              "componentClass": "div",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Add Item",
                "className": "waves-effect waves-dark btn right hoverable dark-green btn btn-primary",
                "id": "add-grocery",
                "onClick": [MockFunction],
                "type": "submit",
              },
              "ref": null,
              "rendered": "Add Item",
              "type": "button",
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
